#!/usr/bin/env python3
import json
import os
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import uuid
from datetime import datetime

# 로그 레벨 정의
class LogLevel:
    INFO = "INFO"
    WARN = "WARN"
    ERROR = "ERROR"
    DEBUG = "DEBUG"

def log(level, message, data=None):
    """구조화된 로그 출력"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if data:
        print(f"[{timestamp}] [{level}] {message} | {data}")
    else:
        print(f"[{timestamp}] [{level}] {message}")

def log_request(method, path, status_code, response_time=None):
    """HTTP 요청 로그"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if response_time:
        print(f"[{timestamp}] [{LogLevel.INFO}] {method} {path} -> {status_code} ({response_time}ms)")
    else:
        print(f"[{timestamp}] [{LogLevel.INFO}] {method} {path} -> {status_code}")

def log_error(error_message, exception=None):
    """에러 로그"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if exception:
        print(f"[{timestamp}] [{LogLevel.ERROR}] {error_message} | {str(exception)}")
    else:
        print(f"[{timestamp}] [{LogLevel.ERROR}] {error_message}")

class DataHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.data_file = 'assets/data/data.json'
        super().__init__(*args, **kwargs)
    
    def log_message(self, format, *args):
        """기본 로그 메시지 비활성화 (우리가 직접 관리)"""
        pass
    
    def load_data(self):
        """데이터 파일 로드"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    log(LogLevel.DEBUG, f"데이터 파일 로드 성공: {self.data_file}")
                    return data
            else:
                log(LogLevel.WARN, f"데이터 파일이 존재하지 않음: {self.data_file}")
                return {
                    "stores": [],
                    "currentStoreId": None,
                    "settings": {},
                    "deliveryOrders": {},
                    "images": {}
                }
        except Exception as e:
            log_error(f"데이터 파일 로드 실패: {self.data_file}", e)
            return {
                "stores": [],
                "currentStoreId": None,
                "settings": {},
                "deliveryOrders": {},
                "images": {}
            }
    
    def save_data(self, data):
        """데이터 파일 저장"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            log(LogLevel.DEBUG, f"데이터 파일 저장 성공: {self.data_file}")
        except Exception as e:
            log_error(f"데이터 파일 저장 실패: {self.data_file}", e)
    
    def send_json_response(self, data, status=200):
        """JSON 응답 전송"""
        self.send_response(status)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def get_request_data(self):
        """POST 요청 데이터 읽기"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            log(LogLevel.DEBUG, f"POST 요청 데이터 수신", data)
            return data
        except Exception as e:
            log_error("POST 요청 데이터 파싱 실패", e)
            return None
    
    def do_GET(self):
        """GET 요청 처리"""
        import time
        start_time = time.time()
        
        try:
            # self.path가 리스트인 경우 문자열로 변환
            path = self.path if isinstance(self.path, str) else str(self.path)
            parsed_path = urlparse(path)
            
            log(LogLevel.INFO, f"GET 요청 수신: {parsed_path.path}")
            
        except Exception as e:
            log_error(f"경로 파싱 오류: {self.path}", e)
            self.send_response(400)
            self.end_headers()
            return
        
        try:
            if parsed_path.path == '/api/data':
                # 전체 데이터 반환
                data = self.load_data()
                self.send_json_response(data)
            
            elif parsed_path.path == '/api/stores':
                # 가게 목록 반환
                data = self.load_data()
                self.send_json_response(data['stores'])
            
            elif parsed_path.path == '/api/current-store':
                # 현재 선택된 가게 반환
                data = self.load_data()
                current_store = None
                if data['currentStoreId']:
                    current_store = next((store for store in data['stores'] if store['id'] == data['currentStoreId']), None)
                self.send_json_response(current_store)
            
            elif parsed_path.path.startswith('/api/settings'):
                # 설정 조회
                query_params = parse_qs(parsed_path.query)
                store_id = query_params.get('storeId', [None])[0]
            
            if not store_id:
                self.send_json_response({"error": "storeId is required"}, 400)
                return
            
            data = self.load_data()
            
            # 해당 가게의 설정이 없으면 가게 정보를 기반으로 기본값 생성
            if store_id not in data['settings']:
                # 가게 정보 찾기
                store_info = None
                for store in data['stores']:
                    if store['id'] == store_id:
                        store_info = store
                        break
                
                if store_info:
                    # 가게 정보를 기반으로 기본 설정 생성
                    data['settings'][store_id] = {
                        "basic": {
                            "storeName": store_info.get('name', ''),
                            "storeSubtitle": store_info.get('subtitle', ''),
                            "storePhone": store_info.get('phone', ''),
                            "storeAddress": store_info.get('address', '')
                        },
                        "discount": {
                            "enabled": False,
                            "title": "할인 이벤트",
                            "description": "할인 내용을 입력하세요"
                        },
                        "delivery": {
                            "ttaengUrl": "",
                            "baeminUrl": "",
                            "coupangUrl": "",
                            "yogiyoUrl": "",
                            "deliveryOrder": ["ttaeng", "baemin", "coupang", "yogiyo"]
                        },
                        "pickup": {
                            "enabled": False,
                            "title": "픽업 안내",
                            "description": "픽업 안내 내용을 입력하세요"
                        },
                        "images": {
                            "mainLogo": "",
                            "menuImage": ""
                        }
                    }
                    self.save_data(data)
                else:
                    # 가게 정보가 없으면 빈 설정 반환
                    self.send_json_response({})
                    return
            
            self.send_json_response(data['settings'][store_id])
        
        elif parsed_path.path == '/api/superadmin/info':
            # 슈퍼어드민 정보 조회
            data = self.load_data()
            superadmin = data.get('superadmin', {})
            
            # 비밀번호는 보안상 제외하고 반환
            superadmin_info = {
                'username': superadmin.get('username', ''),
                'createdAt': superadmin.get('createdAt', ''),
                'lastModified': superadmin.get('lastModified', '')
            }
            
            self.send_json_response(superadmin_info)
        
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        """POST 요청 처리"""
        try:
            # self.path가 리스트인 경우 문자열로 변환
            path = self.path if isinstance(self.path, str) else str(self.path)
            parsed_path = urlparse(path)
        except Exception as e:
            print(f"Path parsing error: {e}, path: {self.path}")
            self.send_response(400)
            self.end_headers()
            return
        
        if parsed_path.path == '/api/data':
            # 전체 데이터 업데이트
            new_data = self.get_request_data()
            self.save_data(new_data)
            self.send_json_response({"message": "Data updated successfully"})
        
        elif parsed_path.path == '/api/stores':
            # 새 가게 생성
            store_data = self.get_request_data()
            
            print("=== STORE CREATION DEBUG ===")
            print(f"Received store_data: {type(store_data)}")
            print(f"Content: {store_data}")
            print(f"Is dict: {isinstance(store_data, dict)}")
            print(f"Is list: {isinstance(store_data, list)}")
            print(f"Is None: {store_data is None}")
            print("========================")
            
            # store_data가 None인 경우 처리
            if store_data is None:
                print("Failed to parse request data")
                self.send_json_response({"error": "Failed to parse request data"}, 400)
                return
            
            # store_data가 딕셔너리가 아닌 경우 처리
            if not isinstance(store_data, dict):
                print(f"ERROR: Invalid store_data type: {type(store_data)}")
                print(f"ERROR: Content: {store_data}")
                self.send_json_response({"error": "Invalid store data format"}, 400)
                return
            
            # store_data가 빈 딕셔너리인 경우 처리
            if not store_data:
                print("Empty store_data received")
                self.send_json_response({"error": "Empty store data"}, 400)
                return
            
            print(f"Processing store_data: {store_data}")
            
            # 가게 ID 생성
            store_id = f"store_{int(datetime.now().timestamp() * 1000)}_{str(uuid.uuid4()).replace('-', '')[:8]}"
            print(f"Generated store_id: {store_id}")
            
            store_data['id'] = store_id
            store_data['createdAt'] = datetime.now().isoformat()
            
            data = self.load_data()
            data['stores'].append(store_data)
            
            # 새 가게의 기본 설정 초기화
            if 'settings' not in data:
                data['settings'] = {}
            
            data['settings'][store_id] = {
                "basic": {
                    "storeName": store_data.get('name', ''),
                    "storeSubtitle": store_data.get('subtitle', ''),
                    "storePhone": store_data.get('phone', ''),
                    "storeAddress": store_data.get('address', '')
                },
                "discount": {
                    "enabled": False,
                    "title": "할인 이벤트",
                    "description": "할인 내용을 입력하세요"
                },
                "delivery": {
                    "ttaengUrl": "",
                    "baeminUrl": "",
                    "coupangUrl": "",
                    "yogiyoUrl": "",
                    "deliveryOrder": ["ttaeng", "baemin", "coupang", "yogiyo"]
                },
                "pickup": {
                    "enabled": False,
                    "title": "픽업 안내",
                    "description": "픽업 안내 내용을 입력하세요"
                },
                "images": {
                    "mainLogo": "",
                    "menuImage": ""
                }
            }
            
            self.save_data(data)
            self.send_json_response(store_data, 201)
        
        elif parsed_path.path == '/api/current-store':
            # 현재 가게 설정
            request_data = self.get_request_data()
            
            data = self.load_data()
            data['currentStoreId'] = request_data['storeId']
            self.save_data(data)
            
            self.send_json_response({'success': True})
        
        elif parsed_path.path.startswith('/api/settings'):
            # 설정 저장
            query_params = parse_qs(parsed_path.query)
            store_id = query_params.get('storeId', [None])[0]
            
            if not store_id:
                self.send_json_response({"error": "storeId is required"}, 400)
                return
            
            settings_data = self.get_request_data()
            
            data = self.load_data()
            if 'settings' not in data:
                data['settings'] = {}
            
            # 기존 설정과 병합
            if store_id in data['settings']:
                # 기존 설정과 새 설정을 병합
                existing_settings = data['settings'][store_id]
                for key, value in settings_data.items():
                    if isinstance(value, dict) and key in existing_settings and isinstance(existing_settings[key], dict):
                        existing_settings[key].update(value)
                    else:
                        existing_settings[key] = value
                data['settings'][store_id] = existing_settings
            else:
                data['settings'][store_id] = settings_data
            
            self.save_data(data)
            
            self.send_json_response({"message": "Settings saved successfully"})
        
        elif parsed_path.path == '/api/superadmin/check':
            # 슈퍼어드민 로그인 확인
            login_data = self.get_request_data()
            username = login_data.get('username')
            password = login_data.get('password')
            
            data = self.load_data()
            superadmin = data.get('superadmin', {})
            
            if username == superadmin.get('username') and password == superadmin.get('password'):
                self.send_json_response({"success": True, "message": "로그인 성공"})
            else:
                self.send_json_response({"success": False, "message": "계정 또는 비밀번호가 올바르지 않습니다."}, 401)
        
        elif parsed_path.path == '/api/superadmin/info':
            # 슈퍼어드민 정보 조회
            data = self.load_data()
            superadmin = data.get('superadmin', {})
            
            # 비밀번호는 보안상 제외하고 반환
            superadmin_info = {
                'username': superadmin.get('username', ''),
                'createdAt': superadmin.get('createdAt', ''),
                'lastModified': superadmin.get('lastModified', '')
            }
            
            self.send_json_response(superadmin_info)
        
        elif parsed_path.path == '/api/superadmin/update':
            # 슈퍼어드민 정보 수정
            update_data = self.get_request_data()
            
            data = self.load_data()
            if 'superadmin' not in data:
                data['superadmin'] = {}
            
            # 기존 정보 유지하면서 업데이트
            if 'username' in update_data:
                data['superadmin']['username'] = update_data['username']
            if 'password' in update_data:
                data['superadmin']['password'] = update_data['password']
            
            data['superadmin']['lastModified'] = datetime.now().isoformat()
            
            self.save_data(data)
            self.send_json_response({"message": "슈퍼어드민 정보가 업데이트되었습니다."})
        
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_PUT(self):
        """PUT 요청 처리"""
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/api/stores':
            # 가게 목록 업데이트
            stores_data = self.get_request_data()
            
            data = self.load_data()
            data['stores'] = stores_data
            self.save_data(data)
            
            self.send_json_response({"message": "Stores updated successfully"})
        
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_DELETE(self):
        """DELETE 요청 처리"""
        try:
            # self.path가 리스트인 경우 문자열로 변환
            path = self.path if isinstance(self.path, str) else str(self.path)
            parsed_path = urlparse(path)
        except Exception as e:
            print(f"Path parsing error: {e}, path: {self.path}")
            self.send_response(400)
            self.end_headers()
            return
        
        if parsed_path.path.startswith('/api/stores/'):
            # 가게 삭제
            store_id = parsed_path.path.split('/')[-1]
            
            data = self.load_data()
            
            # 가게가 존재하는지 확인
            store_exists = any(store['id'] == store_id for store in data['stores'])
            if not store_exists:
                self.send_json_response({"error": "Store not found"}, 404)
                return
            
            # 가게 삭제
            data['stores'] = [store for store in data['stores'] if store['id'] != store_id]
            
            # 해당 가게의 설정도 삭제
            if store_id in data['settings']:
                del data['settings'][store_id]
            
            # 현재 선택된 가게가 삭제된 가게라면 첫 번째 가게로 변경
            if data['currentStoreId'] == store_id and data['stores']:
                data['currentStoreId'] = data['stores'][0]['id']
            elif data['currentStoreId'] == store_id:
                data['currentStoreId'] = None
            
            self.save_data(data)
            self.send_json_response({"message": "Store deleted successfully"})
        
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_OPTIONS(self):
        """CORS preflight 요청 처리"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

if __name__ == '__main__':
    server = HTTPServer(('localhost', 8081), DataHandler)
    print("데이터 API 서버가 http://localhost:8081 에서 실행 중입니다.")
    server.serve_forever()